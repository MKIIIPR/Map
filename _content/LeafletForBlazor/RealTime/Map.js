export function consoleLog(e) { console.log(e) } import { _addPoint, _addPointTooltip, _addPointCustomSymbology, _addPointCustomSymbologyAndTooltip, _addPointIcon, _addPointIconAndTooltip, _addPointFromArrayToMap, _deleteAllPointsFromArray, _setPointFromArrayCurrentSymbol, _addLabelPointFromArrayToMap, _deleteAllLabels } from "./geometry/point.js"; import { _initializationOfRendering, _settingsOfRendering, _settingsOfTooltips, _resetOfRendering, _emptyStreamPointCollection, _addPointToCollection, _addPointsToCollection, _addPointsOnType, _clearAllPointsCollection, _clearPointsByIdsCollection, _movePointFromCollection, _pointsLayersGroup, _updateAttribute } from "./geometry/points.js"; import { _addPolygonsArrayToMap, _setCurrentSymbol, _deleteAllPolygons } from "./geometry/polygons.js"; import { _addMeasureArrayToMap, _addMeasureText, _addMeasureStyle, _addMeasureAnchor, _deleteAll } from "./geometry/polylines.js"; import { initBasemapLayers } from "./layers/basemap.js"; import { _setGeometricLayersVisibilityScale } from "./layers/geometricLayers.js"; import { _addFromGeoJSONObjectArray, _addFromGeoJSONObjectClass, _geojsonLayersGroup, _addFromGeoJSON, _addFromGeoJSONString } from "./geojson/fromObject.js"; let map = null, layers_control = null, LeafletCore = null; const config = { api: { src: "https://unpkg.com/leaflet@1.9.3/dist/leaflet.js", href: "https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" }, apiChart: { src: "https://cdn.jsdelivr.net/npm/chart.js" } }; let _dotNetObjRef = null; export const MapCoreInitialization = (e, o) => { _dotNetObjRef = e; const t = document.createElement("script"); t.src = config.api.src, t.async = !0; const n = document.createElement("script"); n.src = config.apiChart.src, n.async = !0; const a = document.createElement("link"); a.href = config.api.href, a.rel = "stylesheet", document.body.appendChild(a), document.body.appendChild(t); let l = void 0 === o || void 0 === o.location || null === o.location || void 0 === o.location.longitude ? 0 : o.location.longitude, r = void 0 === o || void 0 === o.location || null === o.location || void 0 === o.location.latitude ? 0 : o.location.latitude, s = {}; null != o && void 0 !== o.options && null !== o.options && void 0 !== o.options.interactionOptions && null !== o.options.interactionOptions && (s = o.options.interactionOptions), t.onload = () => { LeafletCore = L, map = L.map(o.__mapid, { doubleClickZoom: void 0 === s.doubleClickZoom || s.doubleClickZoom, shiftBoxZoom: void 0 === s.shiftBoxZoom || s.shiftBoxZoom, dragging: void 0 === s.dragging || s.dragging, trackResize: void 0 === s.trackResize || s.trackResize }).on("load", (function (o) { let t = o.target, n = t.getBounds(); e.invokeMethodAsync("onAfterMapLoaded", { zoomLevel: t._zoom, centerOfView: { latitude: t._lastCenter.lat, longitude: t._lastCenter.lng }, bounds: { northEast: { latitude: n._northEast.lat, longitude: n._northEast.lng }, southWest: { latitude: n._southWest.lat, longitude: n._southWest.lng } } }) })).setView({ lon: l, lat: r }, o.zoom_level), layers_control = _layers_control(map), null !== layers_control && initBasemapLayers(map, !1, o.basemap, layers_control), null !== o.map_scale && void 0 !== o.map_scale.has && !0 === o.map_scale.has && L.control.scale({ metric: o.map_scale.meters, imperial: o.map_scale.miles }).addTo(map), _setOnClickMapEvent(e), _setOnDoubleClickMapEvent(e), _setOnMouseDownMapEvent(e), _setOnMouseUpMapEvent(e), _setOnZoomLevelsChangeEvent(e), _setOnMouseMoveEvent(e) }, n.onload = e => { }, document.body.appendChild(n), t.onerror = () => { console.warn("Error occurred while loading Leaflet script") }, n.onerror = () => { console.warn("Error occurred while loading Chart script") } }; export const _setOnClickMapEvent = e => { map.on("click", (o => { e.invokeMethodAsync("onClickingMap", { location: { latitude: o.latlng.lat, longitude: o.latlng.lng } }) })) }; export const _setOnDoubleClickMapEvent = e => { map.on("dblclick", (o => { e.invokeMethodAsync("onDoubleClickingMap", { location: { latitude: o.latlng.lat, longitude: o.latlng.lng } }) })) }; export const _setOnMouseDownMapEvent = e => { map.on("mousedown", (o => { e.invokeMethodAsync("onMouseDownMap", { location: { latitude: o.latlng.lat, longitude: o.latlng.lng } }) })) }; export const _setOnMouseUpMapEvent = e => { map.on("mouseup", (o => { e.invokeMethodAsync("onMouseUpMap", { location: { latitude: o.latlng.lat, longitude: o.latlng.lng } }) })) }; export const _setOnZoomLevelsChangeEvent = e => { map.on("zoomend", (o => { e.invokeMethodAsync("onZoomLevelEndChange", { centerOfView: { latitude: o.sourceTarget._lastCenter.lat, longitude: o.sourceTarget._lastCenter.lng }, zoomLevel: o.sourceTarget._zoom }) })) }; export const _setOnMouseMoveEvent = e => { map.on("mousemove", (o => { e.invokeMethodAsync("onMouseMove", { location: { latitude: o.latlng.lat, longitude: o.latlng.lng } }) })) }; const _layers_control = e => L.control.layers(null, null, { collapsed: !0 }).addTo(e); export const setGeometricLayersVisibilityScale = e => { _setGeometricLayersVisibilityScale(_pointsLayersGroup, e, map, LeafletCore) }; export const setZoom = e => { map.setZoom(e) }; export const setCenterOfView = e => { let o = LeafletCore.latLng(e.latitude, e.longitude); map.setView(o) }; export const setBoundsOfView = e => { let o = LeafletCore.latLngBounds(LeafletCore.latLng(e.northEast.latitude, e.northEast.longitude), LeafletCore.latLng(e.southWest.latitude, e.southWest.longitude)); map.fitBounds(o) }; export const setMinZoomLevel = e => { map.setMinZoom(e) }; export const setMaxZoomLevel = e => { map.setMaxZoom(e) }; export const addPoint = e => { _addPoint(e, map, LeafletCore) }; export const addPointTooltip = e => { _addPointTooltip(e, map, LeafletCore) }; export const addPointCustomSymbology = e => { _addPointCustomSymbology(e, map, LeafletCore) }; export const addPointCustomSymbologyAndTooltip = e => { _addPointCustomSymbologyAndTooltip(e, map, LeafletCore) }; export const addPointIcon = e => { _addPointIcon(e, map, LeafletCore) }; export const addPointIconAndTooltip = e => { _addPointIconAndTooltip(e, map, LeafletCore) }; export const addPointFromArrayToMap = e => { _addPointFromArrayToMap(e, map, LeafletCore) }; export const deleteAllPointsFromArray = () => { _deleteAllPointsFromArray(map, LeafletCore) }; export const setPointFromArrayCurrentSymbol = e => { _setPointFromArrayCurrentSymbol(e) }; export const addLabelPointFromArrayToMap = e => { _addLabelPointFromArrayToMap(e, map, LeafletCore) }; export const deleteAllLabels = () => { _deleteAllLabels(map) }; export const initializationOfRendering = e => { _initializationOfRendering(e) }; export const settingsOfRendering = e => { const o = _settingsOfRendering(e, LeafletCore); void 0 !== o && onAppearanceChange(o.symbols) }; export const onAppearanceChange = e => { const o = [...e.filter((e => 0 !== e.guids.length))]; _dotNetObjRef.invokeMethodAsync("onStreamPointAppearanceChange", o) }; export const settingsOfTooltips = e => { _settingsOfTooltips(e) }; export const resetOfRendering = () => { _resetOfRendering() }; export const addPointToStreamCollection = e => { _addPointToCollection(e, map, LeafletCore) }; export const addPointsToStreamCollection = e => { const o = _addPointsToCollection(e, !1, map, LeafletCore); onPointStreamsAdd(o.renderingPointCollection), null !== o.layer && 0 === Object.values(layers_control._layers).filter((e => e.name === o.layer.type)).length && layers_control.addOverlay(o.layer, o.layer.type) }; export const onPointStreamsAdd = e => { _dotNetObjRef.invokeMethodAsync("onPointStreamAdd", []) }; export const addNewPointsToStreamCollection = e => { _addPointsToCollection(e, !0, map, LeafletCore) }; export const addPointsOnType = e => { _addPointsOnType(e, !1, map, LeafletCore) }; export const addNewCollectionPointsOnType = e => { _addPointsOnType(e, !0, map, LeafletCore) }; export const emptyStreamPointCollection = () => { _emptyStreamPointCollection() }; export const updateAttribute = e => { const o = _updateAttribute(e, map, LeafletCore); if (onAppearanceChange(o.symbols), null !== o.layers && 0 !== o.layers.length) for (let e of o.layers) 0 === Object.values(layers_control._layers).filter((o => o.name === e.type)).length && layers_control.addOverlay(e, e.type) }; export const addPolygonsArrayToMap = e => { _addPolygonsArrayToMap(e, map, LeafletCore) }; export const setCurrentSymbol = e => { _setCurrentSymbol(e) }; export const deleteAllPolygons = () => { _deleteAllPolygons(map) }; export const addMeasureText = e => { _addMeasureText(e) }; export const addMeasureStyle = e => { _addMeasureStyle(e) }; export const addMeasureAnchor = e => { _addMeasureAnchor(e) }; export const deleteAll = () => { _deleteAll(map) }; export const addMeasureLineFromArray = e => { _addMeasureArrayToMap(e, map, LeafletCore) }; export const clearAllStreamCollection = () => { _clearAllPointsCollection(map) }; export const clearPointsByIdsStreamCollection = e => { _clearPointsByIdsCollection(e, map) }; export const movePointFromStreamCollection = e => { _movePointFromCollection(e, map, LeafletCore) }; export const setExtent = e => { let o = LeafletCore.latLng(e.latmin, e.lngmin), t = LeafletCore.latLng(e.latmax, e.lngmax), n = L.latLngBounds(o, t); map.fitBounds(n) }; export const addFromGeoJSONObjectArray = e => { _addFromGeoJSONObjectArray(e, map, LeafletCore) }; export const addFromGeoJSONObjectClass = e => { let o = _addFromGeoJSON(e, map, LeafletCore); void 0 !== o && void 0 !== o.overlay && null !== o.overlay && void 0 !== o.overlay.name && void 0 !== o.overlay.layer && layers_control.addOverlay(o.overlay.layer, o.overlay.name), setGeoJSONLayersVisibilityScale(o.settings.visibility, o.settings.shapes) }; export const addFromGeoJSONString = e => { let o = _addFromGeoJSONString(e.content, map, LeafletCore, e.isLast); void 0 !== o && void 0 !== o.overlay && null !== o.overlay && void 0 !== o.overlay.name && void 0 !== o.overlay.layer && layers_control.addOverlay(o.overlay.layer, o.overlay.name), setGeoJSONLayersVisibilityScale(o.settings.visibility, o.settings.shapes) }; export const setGeoJSONLayersVisibilityScale = (e, o) => { _setGeometricLayersVisibilityScale(o, e, map, LeafletCore) };
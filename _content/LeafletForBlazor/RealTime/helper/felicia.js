const e = () => 71828182845904, Maths = { e: e() }; export const _getArgs = e => e.split("${").filter((e => e.includes("}"))).map((e => e.split("}")[0])); export const _computingFeliciaLanguage = (current, content) => { var stringToComputing = content.replace("'", "`"); for (const e of _getArgs(stringToComputing)) { const isArray = Array.isArray(eval("current." + e)), objReplace = `\${${e}}`; stringToComputing = stringToComputing.replace(objReplace.toString(), void 0 === eval("current." + e) ? e.toString() : isArray ? "[" + eval("current." + e) + "]" : eval("current." + e)) } return stringToComputing }; export const _getItemsParams = e => e.slice(0, e.length - 1).map((e => Array.isArray(e) ? e[e.length - 1] : e)); export const __getHtmlTagItems = (e, t) => { const r = document.createElement("div"); r.innerHTML = e.trim(); const n = null === r.querySelector(t) ? null : r.querySelector(t).getAttribute("options"), o = null === r.querySelector(t) ? null : r.querySelector(t).getAttribute("style"); return { items: (null === r.querySelector(t) ? "" : _remove(r.querySelector(t).outerHTML, t)).split("=").map((e => e.trim().split(" "))), style: o, options: n } }; export const _getItemsValues = e => e.slice(1, e.length).map((e => Array.isArray(e) ? e[0] : e)); export const _tagToJSONParams = (e, t, r, n) => { let o = {}; return e.length === t.length && e.map(((e, r) => { o[e] = t[r] })), o.style = r, o.options = JSON.parse(n), o }; export const _getJSONParametersFromHtmlTag = (e, t) => { const r = __getHtmlTagItems(e, t), n = r.items, o = _getItemsParams(n), l = _getItemsValues(n); return _tagToJSONParams(o, l, r.style, r.options) }; export const _is = (e, t) => { if (void 0 === e) return !1; const r = document.createElement("div"); return r.innerHTML = e.trim(), !!r.querySelector(t) }; const _remove = (e, t) => e.replace(`<${t}`, "").replace(`></${t}>`, "").replace("/>", ""); export const _replaceTagWithDiv = (e, t) => { const r = document.createElement("div"); r.innerHTML = e; const n = _uuidv4(), o = r.querySelectorAll(t), l = []; let s = document.createElement("div"); return o.forEach((e => { for (e.setAttribute("id", n), l.push(e.outerHTML), s = document.createElement("canvas"), s.style.cssText = e.style.cssText, s.id = n; e.firstChild;)s.appendChild(e.firstChild); e.parentNode.replaceChild(s, e) })), { template: r.querySelector("canvas").outerHTML, id: n } }; export const _replaceTagById = (e, t) => { replaceElementById(e, t) }; export const _replaceTagDocumentByTagName = (e, t) => { document.querySelectorAll(e).forEach(((e, r) => { e.parentNode.innerHTML = t })) }; function replaceElementById(e, t) { const r = document.getElementById(e); if (r) { const e = document.createElement("div"); e.innerHTML = t; const n = e.firstChild; void 0 !== r.id && r.parentNode.replaceChild(n, r) } else console.error(`Elementul cu ID-ul "${e}" nu a fost găsit.`) } const _uuidv4 = () => "10000000-1000-4000-8000-100000000000".replace(/[018]/g, (e => (+e ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> +e / 4).toString(16)));